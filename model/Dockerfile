FROM python:3.9-slim

# Устанавливаем рабочую директорию для приложения
# Все последующие команды будут выполняться относительно этой директории
WORKDIR /app

# Обновление системы и установка необходимых утилит
# Выполняем обновление списка пакетов, устанавливаем утилиту netcat, которая необходима
# для проверки подключения RabbitMQ перед запуском приложения
RUN apt-get update && \
    apt-get install -y netcat-openbsd && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Копируем файл с зависимостями requirements.txt в контейнер
# Этот файл необходим для установки всех зависимостей, указанных в приложении
COPY requirements.txt .

# Устанавливаем pip и зависимости из requirements.txt
# Обновляем pip до последней версии, чтобы избежать возможных проблем с устаревшими версиями
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Копируем исходный код приложения в контейнер
# Исходный код приложения должен быть в папке ./src на вашей машине
COPY ./src /app

# Копируем скрипт wait-for-rabbitmq.sh в контейнер
# Скрипт wait-for-rabbitmq.sh используется для ожидания доступности RabbitMQ перед запуском модели
COPY wait-for-rabbitmq.sh ./wait-for-rabbitmq.sh

# Предоставляем права на выполнение для скрипта ожидания
# Скрипт должен быть исполняемым, чтобы его можно было запустить в контейнере
RUN chmod +x wait-for-rabbitmq.sh

# Указываем команду по умолчанию, которая будет выполнена при запуске контейнера
# Контейнер сначала выполнит скрипт wait-for-rabbitmq.sh для ожидания RabbitMQ,
# а затем запустит модель model.py с использованием Python
CMD ["./wait-for-rabbitmq.sh", "rabbitmq", "python", "model.py"]
